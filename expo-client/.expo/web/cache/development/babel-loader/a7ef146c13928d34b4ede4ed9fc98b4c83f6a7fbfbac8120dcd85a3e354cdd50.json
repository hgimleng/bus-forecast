{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React from 'react';\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { DataTable } from 'react-native-paper';\nimport TableViewHeader from \"./displays/TableViewHeader\";\nimport TableViewInfo from \"./displays/TableViewInfo\";\nimport TableViewTiming from \"./displays/TableViewTiming\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nfunction ArrivalTableView(_ref) {\n  var arrivalData = _ref.arrivalData,\n    selectedStop = _ref.selectedStop,\n    stops = _ref.stops;\n  function getBusTiming(busTimings, stopSequence) {\n    if (!busTimings[stopSequence]) {\n      return '-';\n    }\n    return busTimings[stopSequence]['time'];\n  }\n  function getFontWeight(busTimings, stopSequence) {\n    if (!busTimings[stopSequence]) {\n      return 'normal';\n    }\n    return busTimings[stopSequence]['isForecasted'] ? 'normal' : 'bold';\n  }\n  function timeDiff(time1, time2) {\n    var parseTime = function parseTime(timeStr) {\n      var _timeStr$split$map = timeStr.split(':').map(Number),\n        _timeStr$split$map2 = _slicedToArray(_timeStr$split$map, 3),\n        hours = _timeStr$split$map2[0],\n        minutes = _timeStr$split$map2[1],\n        seconds = _timeStr$split$map2[2];\n      var day = hours < 4 ? 1 : 0;\n      return new Date(0, 0, day, hours, minutes, seconds);\n    };\n    var date1 = parseTime(time1);\n    var date2 = parseTime(time2);\n    var diffMins = Math.max((date2 - date1) / 60000, 0);\n    return Math.round(diffMins * 10) / 10;\n  }\n  function getTravelTimeRange(startStop, endStop) {\n    var minTime = -1;\n    var maxTime = -1;\n    for (var bus of arrivalData) {\n      if (bus['busTimings'][startStop] && bus['busTimings'][endStop]) {\n        var time = timeDiff(bus['busTimings'][endStop]['time'], bus['busTimings'][startStop]['time']);\n        if (minTime == -1 || time < minTime) {\n          minTime = time;\n        }\n        if (maxTime == -1 || time > maxTime) {\n          maxTime = time;\n        }\n      }\n    }\n    if (minTime == -1 || maxTime == -1) {\n      return '-';\n    } else {\n      return minTime + \" - \" + maxTime + \" mins\";\n    }\n  }\n  return _jsx(ScrollView, {\n    horizontal: true,\n    children: _jsxs(DataTable, {\n      children: [_jsxs(DataTable.Header, {\n        children: [_jsx(TableViewHeader, {\n          title: 'Bus Stop',\n          style: {\n            width: 200\n          }\n        }), arrivalData.map(function (item, index) {\n          return _jsx(TableViewHeader, {\n            title: \"Bus \" + item['busId'],\n            style: {\n              width: 80\n            }\n          }, index);\n        }), _jsx(TableViewHeader, {\n          title: 'Travel Time',\n          style: {\n            width: 200\n          }\n        })]\n      }), stops.filter(function (stop) {\n        return stop['stopSequence'] <= parseInt(selectedStop);\n      }).sort(function (a, b) {\n        return b['stopSequence'] - a['stopSequence'];\n      }).map(function (stop) {\n        return _jsxs(DataTable.Row, {\n          style: styles.row,\n          children: [_jsx(TableViewInfo, {\n            content: stop['name']\n          }), arrivalData.map(function (bus, index) {\n            return _jsx(TableViewTiming, {\n              timing: getBusTiming(bus['busTimings'], stop['stopSequence']),\n              fontWeight: getFontWeight(bus['busTimings'], stop['stopSequence'])\n            }, index);\n          }), _jsx(TableViewInfo, {\n            content: getTravelTimeRange(stop['stopSequence'], stop['stopSequence'] - 1)\n          })]\n        }, stop['stopSequence']);\n      })]\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  row: {\n    marginVertical: -6\n  }\n});\nexport default ArrivalTableView;","map":{"version":3,"names":["React","ScrollView","StyleSheet","DataTable","TableViewHeader","TableViewInfo","TableViewTiming","jsx","_jsx","jsxs","_jsxs","ArrivalTableView","_ref","arrivalData","selectedStop","stops","getBusTiming","busTimings","stopSequence","getFontWeight","timeDiff","time1","time2","parseTime","timeStr","_timeStr$split$map","split","map","Number","_timeStr$split$map2","_slicedToArray","hours","minutes","seconds","day","Date","date1","date2","diffMins","Math","max","round","getTravelTimeRange","startStop","endStop","minTime","maxTime","bus","time","horizontal","children","Header","title","style","width","item","index","filter","stop","parseInt","sort","a","b","Row","styles","row","content","timing","fontWeight","create","marginVertical"],"sources":["C:/Users/Heng/Dropbox/PC (2)/Desktop/project/bus-forecast/expo-client/components/ArrivalTableView.js"],"sourcesContent":["import React from 'react'\r\nimport { ScrollView, StyleSheet } from 'react-native'\r\nimport { DataTable } from 'react-native-paper'\r\nimport TableViewHeader from './displays/TableViewHeader'\r\nimport TableViewInfo from './displays/TableViewInfo'\r\nimport TableViewTiming from './displays/TableViewTiming'\r\n\r\nfunction ArrivalTableView({ arrivalData, selectedStop, stops }) {\r\n\r\n    function getBusTiming(busTimings, stopSequence) {\r\n        if (!busTimings[stopSequence]) {\r\n            return '-'\r\n        }\r\n        return busTimings[stopSequence]['time']\r\n    }\r\n\r\n    function getFontWeight(busTimings, stopSequence) {\r\n        if (!busTimings[stopSequence]) {\r\n          return 'normal'\r\n        }\r\n        return busTimings[stopSequence]['isForecasted'] ? 'normal' : 'bold'\r\n    }\r\n\r\n    function timeDiff(time1, time2) {\r\n        const parseTime = (timeStr) => {\r\n            const [hours, minutes, seconds] = timeStr.split(':').map(Number);\r\n            const day = hours < 4 ? 1 : 0;\r\n            return new Date(0, 0, day, hours, minutes, seconds);\r\n        };\r\n    \r\n        const date1 = parseTime(time1);\r\n        const date2 = parseTime(time2);\r\n        const diffMins = Math.max((date2 - date1) / 60000, 0);\r\n\r\n        // Round off to 1 decimal place\r\n        return Math.round(diffMins * 10) / 10\r\n    }\r\n\r\n    function getTravelTimeRange(startStop, endStop) {\r\n        let minTime = -1\r\n        let maxTime = -1\r\n        for (const bus of arrivalData) {\r\n            if (bus['busTimings'][startStop] && bus['busTimings'][endStop]) {\r\n                const time = timeDiff(bus['busTimings'][endStop]['time'], bus['busTimings'][startStop]['time'])\r\n                if (minTime == -1 || time < minTime) {\r\n                    minTime = time\r\n                }\r\n                if (maxTime == -1 || time > maxTime) {\r\n                    maxTime = time\r\n                }\r\n            }\r\n        }\r\n        if (minTime == -1 || maxTime == -1) {\r\n            return '-'\r\n        } else {\r\n            return `${minTime} - ${maxTime} mins`\r\n        }\r\n    }\r\n\r\n    return (\r\n        <ScrollView horizontal={true}>\r\n        <DataTable>\r\n            <DataTable.Header>\r\n                <TableViewHeader title={'Bus Stop'} style={{width: 200}} />\r\n                {arrivalData.map((item, index) => (\r\n                    <TableViewHeader key={index} title={`Bus ${item['busId']}`} style={{width: 80}} />\r\n                ))}\r\n                <TableViewHeader title={'Travel Time'} style={{width: 200}} />\r\n            </DataTable.Header>\r\n            {stops\r\n                .filter(stop => stop['stopSequence'] <= parseInt(selectedStop))\r\n                .sort((a, b) => b['stopSequence'] - a['stopSequence'])\r\n                .map(stop => (\r\n                    <DataTable.Row key={stop['stopSequence']} style={styles.row}>\r\n                        <TableViewInfo content={stop['name']} />\r\n                        {arrivalData.map((bus, index) => (\r\n                            <TableViewTiming key={index} timing={getBusTiming(bus['busTimings'], stop['stopSequence'])} fontWeight={getFontWeight(bus['busTimings'], stop['stopSequence'])} />\r\n                        ))}\r\n                        <TableViewInfo content={getTravelTimeRange(stop['stopSequence'], stop['stopSequence']-1)} />\r\n                    </DataTable.Row>\r\n                  ))\r\n            }\r\n        </DataTable>\r\n        </ScrollView>\r\n    )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    row: {\r\n        marginVertical: -6\r\n    }\r\n});\r\n\r\nexport default ArrivalTableView;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAA,OAAAC,UAAA;AAAA,OAAAC,UAAA;AAEzB,SAASC,SAAS,QAAQ,oBAAoB;AAC9C,OAAOC,eAAe;AACtB,OAAOC,aAAa;AACpB,OAAOC,eAAe;AAAkC,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAExD,SAASC,gBAAgBA,CAAAC,IAAA,EAAuC;EAAA,IAApCC,WAAW,GAAAD,IAAA,CAAXC,WAAW;IAAEC,YAAY,GAAAF,IAAA,CAAZE,YAAY;IAAEC,KAAK,GAAAH,IAAA,CAALG,KAAK;EAExD,SAASC,YAAYA,CAACC,UAAU,EAAEC,YAAY,EAAE;IAC5C,IAAI,CAACD,UAAU,CAACC,YAAY,CAAC,EAAE;MAC3B,OAAO,GAAG;IACd;IACA,OAAOD,UAAU,CAACC,YAAY,CAAC,CAAC,MAAM,CAAC;EAC3C;EAEA,SAASC,aAAaA,CAACF,UAAU,EAAEC,YAAY,EAAE;IAC7C,IAAI,CAACD,UAAU,CAACC,YAAY,CAAC,EAAE;MAC7B,OAAO,QAAQ;IACjB;IACA,OAAOD,UAAU,CAACC,YAAY,CAAC,CAAC,cAAc,CAAC,GAAG,QAAQ,GAAG,MAAM;EACvE;EAEA,SAASE,QAAQA,CAACC,KAAK,EAAEC,KAAK,EAAE;IAC5B,IAAMC,SAAS,GAAG,SAAZA,SAASA,CAAIC,OAAO,EAAK;MAC3B,IAAAC,kBAAA,GAAkCD,OAAO,CAACE,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACC,MAAM,CAAC;QAAAC,mBAAA,GAAAC,cAAA,CAAAL,kBAAA;QAAzDM,KAAK,GAAAF,mBAAA;QAAEG,OAAO,GAAAH,mBAAA;QAAEI,OAAO,GAAAJ,mBAAA;MAC9B,IAAMK,GAAG,GAAGH,KAAK,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC;MAC7B,OAAO,IAAII,IAAI,CAAC,CAAC,EAAE,CAAC,EAAED,GAAG,EAAEH,KAAK,EAAEC,OAAO,EAAEC,OAAO,CAAC;IACvD,CAAC;IAED,IAAMG,KAAK,GAAGb,SAAS,CAACF,KAAK,CAAC;IAC9B,IAAMgB,KAAK,GAAGd,SAAS,CAACD,KAAK,CAAC;IAC9B,IAAMgB,QAAQ,GAAGC,IAAI,CAACC,GAAG,CAAC,CAACH,KAAK,GAAGD,KAAK,IAAI,KAAK,EAAE,CAAC,CAAC;IAGrD,OAAOG,IAAI,CAACE,KAAK,CAACH,QAAQ,GAAG,EAAE,CAAC,GAAG,EAAE;EACzC;EAEA,SAASI,kBAAkBA,CAACC,SAAS,EAAEC,OAAO,EAAE;IAC5C,IAAIC,OAAO,GAAG,CAAC,CAAC;IAChB,IAAIC,OAAO,GAAG,CAAC,CAAC;IAChB,KAAK,IAAMC,GAAG,IAAIlC,WAAW,EAAE;MAC3B,IAAIkC,GAAG,CAAC,YAAY,CAAC,CAACJ,SAAS,CAAC,IAAII,GAAG,CAAC,YAAY,CAAC,CAACH,OAAO,CAAC,EAAE;QAC5D,IAAMI,IAAI,GAAG5B,QAAQ,CAAC2B,GAAG,CAAC,YAAY,CAAC,CAACH,OAAO,CAAC,CAAC,MAAM,CAAC,EAAEG,GAAG,CAAC,YAAY,CAAC,CAACJ,SAAS,CAAC,CAAC,MAAM,CAAC,CAAC;QAC/F,IAAIE,OAAO,IAAI,CAAC,CAAC,IAAIG,IAAI,GAAGH,OAAO,EAAE;UACjCA,OAAO,GAAGG,IAAI;QAClB;QACA,IAAIF,OAAO,IAAI,CAAC,CAAC,IAAIE,IAAI,GAAGF,OAAO,EAAE;UACjCA,OAAO,GAAGE,IAAI;QAClB;MACJ;IACJ;IACA,IAAIH,OAAO,IAAI,CAAC,CAAC,IAAIC,OAAO,IAAI,CAAC,CAAC,EAAE;MAChC,OAAO,GAAG;IACd,CAAC,MAAM;MACH,OAAUD,OAAO,WAAMC,OAAO;IAClC;EACJ;EAEA,OACItC,IAAA,CAACP,UAAU;IAACgD,UAAU,EAAE,IAAK;IAAAC,QAAA,EAC7BxC,KAAA,CAACP,SAAS;MAAA+C,QAAA,GACNxC,KAAA,CAACP,SAAS,CAACgD,MAAM;QAAAD,QAAA,GACb1C,IAAA,CAACJ,eAAe;UAACgD,KAAK,EAAE,UAAW;UAACC,KAAK,EAAE;YAACC,KAAK,EAAE;UAAG;QAAE,CAAE,CAAC,EAC1DzC,WAAW,CAACc,GAAG,CAAC,UAAC4B,IAAI,EAAEC,KAAK;UAAA,OACzBhD,IAAA,CAACJ,eAAe;YAAagD,KAAK,WAASG,IAAI,CAAC,OAAO,CAAI;YAACF,KAAK,EAAE;cAACC,KAAK,EAAE;YAAE;UAAE,GAAzDE,KAA2D,CAAC;QAAA,CACrF,CAAC,EACFhD,IAAA,CAACJ,eAAe;UAACgD,KAAK,EAAE,aAAc;UAACC,KAAK,EAAE;YAACC,KAAK,EAAE;UAAG;QAAE,CAAE,CAAC;MAAA,CAChD,CAAC,EAClBvC,KAAK,CACD0C,MAAM,CAAC,UAAAC,IAAI;QAAA,OAAIA,IAAI,CAAC,cAAc,CAAC,IAAIC,QAAQ,CAAC7C,YAAY,CAAC;MAAA,EAAC,CAC9D8C,IAAI,CAAC,UAACC,CAAC,EAAEC,CAAC;QAAA,OAAKA,CAAC,CAAC,cAAc,CAAC,GAAGD,CAAC,CAAC,cAAc,CAAC;MAAA,EAAC,CACrDlC,GAAG,CAAC,UAAA+B,IAAI;QAAA,OACLhD,KAAA,CAACP,SAAS,CAAC4D,GAAG;UAA4BV,KAAK,EAAEW,MAAM,CAACC,GAAI;UAAAf,QAAA,GACxD1C,IAAA,CAACH,aAAa;YAAC6D,OAAO,EAAER,IAAI,CAAC,MAAM;UAAE,CAAE,CAAC,EACvC7C,WAAW,CAACc,GAAG,CAAC,UAACoB,GAAG,EAAES,KAAK;YAAA,OACxBhD,IAAA,CAACF,eAAe;cAAa6D,MAAM,EAAEnD,YAAY,CAAC+B,GAAG,CAAC,YAAY,CAAC,EAAEW,IAAI,CAAC,cAAc,CAAC,CAAE;cAACU,UAAU,EAAEjD,aAAa,CAAC4B,GAAG,CAAC,YAAY,CAAC,EAAEW,IAAI,CAAC,cAAc,CAAC;YAAE,GAAzIF,KAA2I,CAAC;UAAA,CACrK,CAAC,EACFhD,IAAA,CAACH,aAAa;YAAC6D,OAAO,EAAExB,kBAAkB,CAACgB,IAAI,CAAC,cAAc,CAAC,EAAEA,IAAI,CAAC,cAAc,CAAC,GAAC,CAAC;UAAE,CAAE,CAAC;QAAA,GAL5EA,IAAI,CAAC,cAAc,CAMxB,CAAC;MAAA,CACjB,CAAC;IAAA,CAED;EAAC,CACA,CAAC;AAErB;AAEA,IAAMM,MAAM,GAAG9D,UAAU,CAACmE,MAAM,CAAC;EAC7BJ,GAAG,EAAE;IACDK,cAAc,EAAE,CAAC;EACrB;AACJ,CAAC,CAAC;AAEF,eAAe3D,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}