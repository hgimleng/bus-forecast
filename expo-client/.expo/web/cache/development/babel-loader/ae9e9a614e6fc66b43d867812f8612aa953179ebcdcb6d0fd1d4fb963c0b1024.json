{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { Button, SegmentedButtons, Text } from 'react-native-paper';\nimport ArrivalListView from \"./ArrivalListView\";\nimport ArrivalTableView from \"./ArrivalTableView\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nfunction BusArrivalDisplay(_ref) {\n  var arrivalData = _ref.arrivalData,\n    updateTime = _ref.updateTime,\n    refreshData = _ref.refreshData,\n    selectedStop = _ref.selectedStop,\n    stops = _ref.stops,\n    busDiff = _ref.busDiff,\n    isLoading = _ref.isLoading;\n  var _useState = useState('list'),\n    _useState2 = _slicedToArray(_useState, 2),\n    viewType = _useState2[0],\n    setViewType = _useState2[1];\n  var _useState3 = useState(true),\n    _useState4 = _slicedToArray(_useState3, 2),\n    allowRefresh = _useState4[0],\n    setAllowRefresh = _useState4[1];\n  function handleRefresh() {\n    refreshData();\n    setAllowRefresh(false);\n    setTimeout(function () {\n      setAllowRefresh(true);\n    }, 15000);\n  }\n  return _jsxs(View, {\n    children: [_jsxs(View, {\n      style: styles.buttonView,\n      children: [_jsx(SegmentedButtons, {\n        value: viewType,\n        onValueChange: function onValueChange(value) {\n          return setViewType(value);\n        },\n        buttons: [{\n          label: 'List View',\n          value: 'list'\n        }, {\n          label: 'Table View',\n          value: 'table'\n        }],\n        theme: {\n          roundness: 0\n        },\n        style: {\n          flex: 4\n        }\n      }), _jsx(Button, {\n        style: {\n          flex: 1\n        },\n        mode: 'outlined',\n        onPress: handleRefresh,\n        theme: {\n          roundness: 0\n        },\n        disabled: !allowRefresh,\n        loading: isLoading,\n        children: \"Refresh\"\n      })]\n    }), _jsx(Text, {\n      variant: \"headlineSmall\",\n      style: styles.text,\n      children: stops.filter(function (s) {\n        return s['stopSequence'] === selectedStop;\n      })[0]['name']\n    }), viewType === 'list' && _jsx(ArrivalListView, {\n      arrivalData: arrivalData,\n      updateTime: updateTime,\n      selectedStop: selectedStop,\n      busDiff: busDiff\n    }), viewType === 'table' && _jsx(ArrivalTableView, {\n      arrivalData: arrivalData,\n      selectedStop: selectedStop,\n      stops: stops\n    }), _jsxs(Text, {\n      children: [\"Last Updated: \", updateTime]\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    borderTopColor: 'lightgrey',\n    borderTopWidth: 1,\n    width: '90%',\n    alignItems: 'center',\n    marginBottom: 12\n  },\n  text: {\n    textAlign: 'center'\n  },\n  buttonView: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginVertical: 12\n  }\n});\nexport default BusArrivalDisplay;","map":{"version":3,"names":["React","useState","View","StyleSheet","Button","SegmentedButtons","Text","ArrivalListView","ArrivalTableView","jsx","_jsx","jsxs","_jsxs","BusArrivalDisplay","_ref","arrivalData","updateTime","refreshData","selectedStop","stops","busDiff","isLoading","_useState","_useState2","_slicedToArray","viewType","setViewType","_useState3","_useState4","allowRefresh","setAllowRefresh","handleRefresh","setTimeout","children","style","styles","buttonView","value","onValueChange","buttons","label","theme","roundness","flex","mode","onPress","disabled","loading","variant","text","filter","s","create","container","borderTopColor","borderTopWidth","width","alignItems","marginBottom","textAlign","flexDirection","justifyContent","marginVertical"],"sources":["C:/Users/Heng/Dropbox/PC (2)/Desktop/project/bus-forecast/expo-client/components/BusArrivalDisplay.js"],"sourcesContent":["import React, { useState } from 'react'\r\nimport { View, StyleSheet } from 'react-native'\r\nimport { Button, SegmentedButtons, Text } from 'react-native-paper';\r\n\r\nimport ArrivalListView from './ArrivalListView'\r\nimport ArrivalTableView from './ArrivalTableView'\r\n\r\nfunction BusArrivalDisplay({ arrivalData, updateTime, refreshData, selectedStop, stops, busDiff, isLoading }) {\r\n    const [viewType, setViewType] = useState('list')\r\n    const [allowRefresh, setAllowRefresh] = useState(true)\r\n\r\n    function handleRefresh() {\r\n        refreshData()\r\n        setAllowRefresh(false)\r\n\r\n        setTimeout(() => {\r\n            setAllowRefresh(true)\r\n        }, 15000);\r\n    }\r\n\r\n    return (\r\n        <View>\r\n            <View style={styles.buttonView}>\r\n            <SegmentedButtons\r\n                value={viewType}\r\n                onValueChange={value => setViewType(value)}\r\n                buttons={[{ label: 'List View', value: 'list' }, { label: 'Table View', value: 'table' }]}\r\n                theme={{ roundness: 0 }}\r\n                style={{ flex: 4 }}\r\n            />\r\n            <Button style={{ flex: 1 }} mode={'outlined'} onPress={handleRefresh} theme={{ roundness: 0 }} disabled={!allowRefresh} loading={isLoading} >\r\n                Refresh\r\n            </Button>\r\n            </View>\r\n\r\n            <Text\r\n            variant=\"headlineSmall\"\r\n            style={styles.text}>\r\n                { stops.filter(s => s['stopSequence'] === selectedStop)[0]['name'] }\r\n            </Text>\r\n            {viewType === 'list' && <ArrivalListView arrivalData={arrivalData} updateTime={updateTime} selectedStop={selectedStop} busDiff={busDiff} />}\r\n            {viewType === 'table' && <ArrivalTableView arrivalData={arrivalData} selectedStop={selectedStop} stops={stops} />}\r\n            <Text>Last Updated: {updateTime}</Text>\r\n        </View>\r\n    )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        borderTopColor: 'lightgrey',\r\n        borderTopWidth: 1,\r\n        width: '90%',\r\n        alignItems: 'center',\r\n        marginBottom: 12,\r\n    },\r\n    text: {\r\n        textAlign: 'center',\r\n    },\r\n    buttonView: {\r\n        flexDirection: 'row',\r\n        justifyContent: 'space-between',\r\n        marginVertical: 12,\r\n    }\r\n});\r\n\r\nexport default BusArrivalDisplay;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAA,OAAAC,IAAA;AAAA,OAAAC,UAAA;AAEvC,SAASC,MAAM,EAAEC,gBAAgB,EAAEC,IAAI,QAAQ,oBAAoB;AAEnE,OAAOC,eAAe;AACtB,OAAOC,gBAAgB;AAA0B,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAEjD,SAASC,iBAAiBA,CAAAC,IAAA,EAAoF;EAAA,IAAjFC,WAAW,GAAAD,IAAA,CAAXC,WAAW;IAAEC,UAAU,GAAAF,IAAA,CAAVE,UAAU;IAAEC,WAAW,GAAAH,IAAA,CAAXG,WAAW;IAAEC,YAAY,GAAAJ,IAAA,CAAZI,YAAY;IAAEC,KAAK,GAAAL,IAAA,CAALK,KAAK;IAAEC,OAAO,GAAAN,IAAA,CAAPM,OAAO;IAAEC,SAAS,GAAAP,IAAA,CAATO,SAAS;EACtG,IAAAC,SAAA,GAAgCrB,QAAQ,CAAC,MAAM,CAAC;IAAAsB,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAzCG,QAAQ,GAAAF,UAAA;IAAEG,WAAW,GAAAH,UAAA;EAC5B,IAAAI,UAAA,GAAwC1B,QAAQ,CAAC,IAAI,CAAC;IAAA2B,UAAA,GAAAJ,cAAA,CAAAG,UAAA;IAA/CE,YAAY,GAAAD,UAAA;IAAEE,eAAe,GAAAF,UAAA;EAEpC,SAASG,aAAaA,CAAA,EAAG;IACrBd,WAAW,CAAC,CAAC;IACba,eAAe,CAAC,KAAK,CAAC;IAEtBE,UAAU,CAAC,YAAM;MACbF,eAAe,CAAC,IAAI,CAAC;IACzB,CAAC,EAAE,KAAK,CAAC;EACb;EAEA,OACIlB,KAAA,CAACV,IAAI;IAAA+B,QAAA,GACDrB,KAAA,CAACV,IAAI;MAACgC,KAAK,EAAEC,MAAM,CAACC,UAAW;MAAAH,QAAA,GAC/BvB,IAAA,CAACL,gBAAgB;QACbgC,KAAK,EAAEZ,QAAS;QAChBa,aAAa,EAAE,SAAAA,cAAAD,KAAK;UAAA,OAAIX,WAAW,CAACW,KAAK,CAAC;QAAA,CAAC;QAC3CE,OAAO,EAAE,CAAC;UAAEC,KAAK,EAAE,WAAW;UAAEH,KAAK,EAAE;QAAO,CAAC,EAAE;UAAEG,KAAK,EAAE,YAAY;UAAEH,KAAK,EAAE;QAAQ,CAAC,CAAE;QAC1FI,KAAK,EAAE;UAAEC,SAAS,EAAE;QAAE,CAAE;QACxBR,KAAK,EAAE;UAAES,IAAI,EAAE;QAAE;MAAE,CACtB,CAAC,EACFjC,IAAA,CAACN,MAAM;QAAC8B,KAAK,EAAE;UAAES,IAAI,EAAE;QAAE,CAAE;QAACC,IAAI,EAAE,UAAW;QAACC,OAAO,EAAEd,aAAc;QAACU,KAAK,EAAE;UAAEC,SAAS,EAAE;QAAE,CAAE;QAACI,QAAQ,EAAE,CAACjB,YAAa;QAACkB,OAAO,EAAE1B,SAAU;QAAAY,QAAA,EAAE;MAE7I,CAAQ,CAAC;IAAA,CACH,CAAC,EAEPvB,IAAA,CAACJ,IAAI;MACL0C,OAAO,EAAC,eAAe;MACvBd,KAAK,EAAEC,MAAM,CAACc,IAAK;MAAAhB,QAAA,EACbd,KAAK,CAAC+B,MAAM,CAAC,UAAAC,CAAC;QAAA,OAAIA,CAAC,CAAC,cAAc,CAAC,KAAKjC,YAAY;MAAA,EAAC,CAAC,CAAC,CAAC,CAAC,MAAM;IAAC,CAChE,CAAC,EACNO,QAAQ,KAAK,MAAM,IAAIf,IAAA,CAACH,eAAe;MAACQ,WAAW,EAAEA,WAAY;MAACC,UAAU,EAAEA,UAAW;MAACE,YAAY,EAAEA,YAAa;MAACE,OAAO,EAAEA;IAAQ,CAAE,CAAC,EAC1IK,QAAQ,KAAK,OAAO,IAAIf,IAAA,CAACF,gBAAgB;MAACO,WAAW,EAAEA,WAAY;MAACG,YAAY,EAAEA,YAAa;MAACC,KAAK,EAAEA;IAAM,CAAE,CAAC,EACjHP,KAAA,CAACN,IAAI;MAAA2B,QAAA,GAAC,gBAAc,EAACjB,UAAU;IAAA,CAAO,CAAC;EAAA,CACrC,CAAC;AAEf;AAEA,IAAMmB,MAAM,GAAGhC,UAAU,CAACiD,MAAM,CAAC;EAC7BC,SAAS,EAAE;IACPC,cAAc,EAAE,WAAW;IAC3BC,cAAc,EAAE,CAAC;IACjBC,KAAK,EAAE,KAAK;IACZC,UAAU,EAAE,QAAQ;IACpBC,YAAY,EAAE;EAClB,CAAC;EACDT,IAAI,EAAE;IACFU,SAAS,EAAE;EACf,CAAC;EACDvB,UAAU,EAAE;IACRwB,aAAa,EAAE,KAAK;IACpBC,cAAc,EAAE,eAAe;IAC/BC,cAAc,EAAE;EACpB;AACJ,CAAC,CAAC;AAEF,eAAejD,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}